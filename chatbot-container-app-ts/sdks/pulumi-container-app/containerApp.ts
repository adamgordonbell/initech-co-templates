// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * A component that deploys a containerized application to AWS ECS Fargate.
 */
export class ContainerApp extends pulumi.ComponentResource {
    /** @internal */
    public static readonly __pulumiType = 'container-app:index:ContainerApp';

    /**
     * Returns true if the given object is an instance of ContainerApp.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ContainerApp {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ContainerApp.__pulumiType;
    }

    /**
     * The URL to the ECS service metrics dashboard.
     */
    public /*out*/ readonly metricsUrl!: pulumi.Output<string>;
    /**
     * The URL of the deployed application.
     */
    public /*out*/ readonly url!: pulumi.Output<string>;

    /**
     * Create a ContainerApp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ContainerAppArgs, opts?: pulumi.ComponentResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (!opts.id) {
            if ((!args || args.appPort === undefined) && !opts.urn) {
                throw new Error("Missing required property 'appPort'");
            }
            resourceInputs["albCertArn"] = args ? args.albCertArn : undefined;
            resourceInputs["appPath"] = args ? args.appPath : undefined;
            resourceInputs["appPort"] = args ? args.appPort : undefined;
            resourceInputs["cpu"] = args ? args.cpu : undefined;
            resourceInputs["desiredCount"] = args ? args.desiredCount : undefined;
            resourceInputs["env"] = args ? args.env : undefined;
            resourceInputs["image"] = args ? args.image : undefined;
            resourceInputs["memory"] = args ? args.memory : undefined;
            resourceInputs["owner"] = args ? args.owner : undefined;
            resourceInputs["publicSubnetIds"] = args ? args.publicSubnetIds : undefined;
            resourceInputs["secrets"] = args ? args.secrets : undefined;
            resourceInputs["vpcId"] = args ? args.vpcId : undefined;
            resourceInputs["metricsUrl"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        } else {
            resourceInputs["metricsUrl"] = undefined /*out*/;
            resourceInputs["url"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ContainerApp.__pulumiType, name, resourceInputs, opts, true /*remote*/);
    }
}

/**
 * The set of arguments for constructing a ContainerApp resource.
 */
export interface ContainerAppArgs {
    albCertArn?: pulumi.Input<string>;
    appPath?: pulumi.Input<string>;
    appPort: pulumi.Input<number>;
    cpu?: pulumi.Input<string>;
    desiredCount?: pulumi.Input<number>;
    env?: {[key: string]: pulumi.Input<string>};
    image?: pulumi.Input<string>;
    memory?: pulumi.Input<string>;
    owner?: pulumi.Input<string>;
    publicSubnetIds?: pulumi.Input<string[]>;
    secrets?: {[key: string]: pulumi.Input<string>};
    vpcId?: pulumi.Input<string>;
}
